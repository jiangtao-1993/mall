{"remainingRequest":"D:\\heima88\\leyou-manage-web\\node_modules\\babel-loader\\lib\\index.js!D:\\heima88\\leyou-manage-web\\node_modules\\vuetify-loader\\lib\\loader.js!D:\\heima88\\leyou-manage-web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\heima88\\leyou-manage-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\heima88\\leyou-manage-web\\src\\views\\item\\MyBrand.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\heima88\\leyou-manage-web\\src\\views\\item\\MyBrand.vue","mtime":1576725362344},{"path":"D:\\heima88\\leyou-manage-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\heima88\\leyou-manage-web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\heima88\\leyou-manage-web\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1549812933000},{"path":"D:\\heima88\\leyou-manage-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\heima88\\leyou-manage-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//倒入组件\nimport BrandForm from \"./BrandForm\";\nexport default {\n  components: {\n    BrandForm: BrandForm //组件的声明\n\n  },\n  name: \"my-brand\",\n  data: function data() {\n    return {\n      oldBrand: {},\n      isEdit: false,\n      dialog: false,\n      key: \"\",\n      totalBrands: 0,\n      // 总条数\n      brands: [],\n      // 当前页品牌数据\n      loading: true,\n      // 是否在加载中\n      pagination: {},\n      // 分页信息\n      headers: [{\n        text: 'id',\n        align: 'center',\n        value: 'id'\n      }, {\n        text: '名称',\n        align: 'center',\n        sortable: false,\n        value: 'name'\n      }, {\n        text: 'LOGO',\n        align: 'center',\n        sortable: false,\n        value: 'image'\n      }, {\n        text: '首字母',\n        align: 'center',\n        value: 'letter',\n        sortable: true\n      }, {\n        text: '操作',\n        align: 'center',\n        sortable: false\n      }]\n    };\n  },\n  mounted: function mounted() {\n    // 渲染后执行\n    // 查询数据\n    this.getDataFromServer();\n  },\n  methods: {\n    getDataFromServer: function getDataFromServer() {\n      var _this = this;\n\n      // 从服务的加载数据的方法。\n      this.$http.get(\"/item/brand/page\", {\n        params: {\n          page: this.pagination.page,\n          //当前页\n          rows: this.pagination.rowsPerPage,\n          //页容量\n          sortBy: this.pagination.sortBy,\n          //根据什么排序\n          desc: this.pagination.descending,\n          //排序的条件\n          key: this.key //请求发出时，携带key\n\n        }\n      }).then(function (resp) {\n        _this.totalBrands = resp.data.total, // 总条数\n        _this.brands = resp.data.items, // 当前页品牌数据\n        _this.loading = false; // 是否在加载中\n      }).catch(function (resp) {\n        _this.$message.error(\"品牌查询请求失败\");\n      });\n    },\n    addBrand: function addBrand() {\n      this.oldBrand = {\n        image: \"\"\n      };\n      this.isEdit = false; //新增isEdit为false\n\n      this.dialog = true;\n    },\n    closeWindow: function closeWindow() {\n      this.dialog = false;\n    },\n    editBrand: function editBrand(oldBrand) {\n      var _this2 = this;\n\n      //根据品牌的id查询对应的分类信息\n      this.$http.get(\"/item/category/of/brand/\" + oldBrand.id).then(function (resp) {\n        //分类的数组，值从返回的data中获取（分类的集合）\n        oldBrand.categories = resp.data;\n        _this2.oldBrand = oldBrand;\n        _this2.isEdit = true; //修改是isEdit为true\n\n        _this2.dialog = true;\n      }).catch(function (resp) {\n        _this2.$message.error(\"根据品牌查询分类失败\");\n      });\n    },\n    deleteBrand: function deleteBrand(brandId) {\n      var _this3 = this;\n\n      this.$message.confirm(\"您确定要删除\").then(function (resp) {\n        _this3.$http.delete(\"item/brand/\" + brandId);\n      }).catch(function (resp) {});\n    }\n  },\n  watch: {\n    pagination: {\n      deep: true,\n      //深度监控，表示监控对象本身，以及下面所有的属性\n      handler: function handler() {\n        //表示有变化后触发的函数\n        //处理分页页容量的bug,如果当前rows为-1表示，要展示所有，展示所有，就把所有的条数赋值给页容量\n        if (this.pagination.rowsPerPage === -1) {\n          this.pagination.rowsPerPage = this.totalBrands;\n        }\n\n        this.getDataFromServer();\n      }\n    },\n    key: function key() {\n      this.getDataFromServer();\n    }\n  }\n};",{"version":3,"sources":["MyBrand.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n    <div>\r\n\r\n        <v-card>\r\n            <v-card-title>\r\n                <v-btn class=\"primary\" @click=\"addBrand\">新增品牌</v-btn>\r\n                <v-spacer/>\r\n                <v-text-field label=\"搜索\" append-icon=\"search\" hide-details v-model=\"key\"></v-text-field>\r\n            </v-card-title>\r\n\r\n\r\n            <v-divider/>\r\n            <v-data-table\r\n                    :headers=\"headers\"\r\n                    :items=\"brands\"\r\n                    :pagination.sync=\"pagination\"\r\n                    :total-items=\"totalBrands\"\r\n                    :loading=\"loading\"\r\n                    class=\"elevation-1\"\r\n            >\r\n                <template slot=\"items\" slot-scope=\"props\">\r\n                    <td>{{ props.item.id }}</td>\r\n                    <td class=\"text-xs-center\">{{ props.item.name }}</td>\r\n                    <td class=\"text-xs-center\"><img :src=\"props.item.image\"></td>\r\n                    <td class=\"text-xs-center\">{{ props.item.letter }}</td>\r\n                    <td class=\"text-xs-center\">\r\n                        <v-btn class=\"warning\" @click=\"editBrand(props.item)\">编辑</v-btn>\r\n                        <v-btn class=\"info\" @click=\"deleteBrand(props.item.id)\">删除</v-btn>\r\n                    </td>\r\n                </template>\r\n            </v-data-table>\r\n        </v-card>\r\n\r\n        <!--        v-model 双向绑定，dialog，true，显示对话框-->\r\n        <v-dialog v-model=\"dialog\" width=\"500\" persistent>\r\n            <brand-form @close=\"closeWindow\" :is-edit=\"isEdit\" :old-brand=\"oldBrand\"></brand-form>\r\n        </v-dialog>\r\n\r\n\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    //倒入组件\r\n    import BrandForm from \"./BrandForm\"\r\n\r\n    export default {\r\n        components: {\r\n            BrandForm //组件的声明\r\n        },\r\n        name: \"my-brand\",\r\n        data() {\r\n            return {\r\n                oldBrand: {},\r\n                isEdit: false,\r\n                dialog: false,\r\n                key: \"\",\r\n                totalBrands: 0, // 总条数\r\n                brands: [], // 当前页品牌数据\r\n                loading: true, // 是否在加载中\r\n                pagination: {}, // 分页信息\r\n                headers: [\r\n                    {text: 'id', align: 'center', value: 'id'},\r\n                    {text: '名称', align: 'center', sortable: false, value: 'name'},\r\n                    {text: 'LOGO', align: 'center', sortable: false, value: 'image'},\r\n                    {text: '首字母', align: 'center', value: 'letter', sortable: true},\r\n                    {text: '操作', align: 'center', sortable: false}\r\n                ]\r\n            }\r\n        },\r\n        mounted() { // 渲染后执行\r\n            // 查询数据\r\n            this.getDataFromServer();\r\n        },\r\n        methods: {\r\n            getDataFromServer() { // 从服务的加载数据的方法。\r\n                this.$http.get(\"/item/brand/page\", {\r\n                    params: {\r\n                        page: this.pagination.page, //当前页\r\n                        rows: this.pagination.rowsPerPage, //页容量\r\n                        sortBy: this.pagination.sortBy, //根据什么排序\r\n                        desc: this.pagination.descending, //排序的条件\r\n                        key: this.key //请求发出时，携带key\r\n                    }\r\n                }).then(resp => {\r\n                    this.totalBrands = resp.data.total,// 总条数\r\n                        this.brands = resp.data.items, // 当前页品牌数据\r\n                        this.loading = false // 是否在加载中\r\n                }).catch(resp => {\r\n                    this.$message.error(\"品牌查询请求失败\");\r\n                })\r\n            },\r\n            addBrand() {\r\n                this.oldBrand = {\r\n                    image: \"\"\r\n                };\r\n                this.isEdit = false;//新增isEdit为false\r\n                this.dialog = true;\r\n            },\r\n            closeWindow() {\r\n                this.dialog = false;\r\n            },\r\n            editBrand(oldBrand) {\r\n                //根据品牌的id查询对应的分类信息\r\n                this.$http.get(\"/item/category/of/brand/\" + oldBrand.id)\r\n                    .then(resp => {\r\n                        //分类的数组，值从返回的data中获取（分类的集合）\r\n                        oldBrand.categories = resp.data;\r\n                        this.oldBrand = oldBrand;\r\n                        this.isEdit = true;//修改是isEdit为true\r\n                        this.dialog = true;\r\n                    }).catch(resp => {\r\n                    this.$message.error(\"根据品牌查询分类失败\");\r\n                })\r\n            },\r\n            deleteBrand(brandId){\r\n                this.$message.confirm(\"您确定要删除\")\r\n                    .then(resp=>{\r\n                        this.$http.delete(\"item/brand/\"+brandId)\r\n                    }).catch(resp=>{\r\n\r\n                })\r\n            }\r\n        },\r\n        watch: {\r\n            pagination: {\r\n                deep: true, //深度监控，表示监控对象本身，以及下面所有的属性\r\n                handler() { //表示有变化后触发的函数\r\n                    //处理分页页容量的bug,如果当前rows为-1表示，要展示所有，展示所有，就把所有的条数赋值给页容量\r\n                    if (this.pagination.rowsPerPage === -1) {\r\n                        this.pagination.rowsPerPage = this.totalBrands;\r\n                    }\r\n                    this.getDataFromServer();\r\n                }\r\n            },\r\n            key() {\r\n                this.getDataFromServer();\r\n            }\r\n        }\r\n    }\r\n</script>"],"sourceRoot":"src/views/item"}]}