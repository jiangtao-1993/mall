{"remainingRequest":"D:\\heima88\\leyou-manage-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\heima88\\leyou-manage-web\\src\\views\\item\\MyBrand.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\heima88\\leyou-manage-web\\src\\views\\item\\MyBrand.vue","mtime":1576725362344},{"path":"D:\\heima88\\leyou-manage-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\heima88\\leyou-manage-web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\heima88\\leyou-manage-web\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1549812933000},{"path":"D:\\heima88\\leyou-manage-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\heima88\\leyou-manage-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n//倒入组件\nimport BrandForm from \"./BrandForm\"\n\nexport default {\n    components: {\n        BrandForm //组件的声明\n    },\n    name: \"my-brand\",\n    data() {\n        return {\n            oldBrand: {},\n            isEdit: false,\n            dialog: false,\n            key: \"\",\n            totalBrands: 0, // 总条数\n            brands: [], // 当前页品牌数据\n            loading: true, // 是否在加载中\n            pagination: {}, // 分页信息\n            headers: [\n                {text: 'id', align: 'center', value: 'id'},\n                {text: '名称', align: 'center', sortable: false, value: 'name'},\n                {text: 'LOGO', align: 'center', sortable: false, value: 'image'},\n                {text: '首字母', align: 'center', value: 'letter', sortable: true},\n                {text: '操作', align: 'center', sortable: false}\n            ]\n        }\n    },\n    mounted() { // 渲染后执行\n        // 查询数据\n        this.getDataFromServer();\n    },\n    methods: {\n        getDataFromServer() { // 从服务的加载数据的方法。\n            this.$http.get(\"/item/brand/page\", {\n                params: {\n                    page: this.pagination.page, //当前页\n                    rows: this.pagination.rowsPerPage, //页容量\n                    sortBy: this.pagination.sortBy, //根据什么排序\n                    desc: this.pagination.descending, //排序的条件\n                    key: this.key //请求发出时，携带key\n                }\n            }).then(resp => {\n                this.totalBrands = resp.data.total,// 总条数\n                    this.brands = resp.data.items, // 当前页品牌数据\n                    this.loading = false // 是否在加载中\n            }).catch(resp => {\n                this.$message.error(\"品牌查询请求失败\");\n            })\n        },\n        addBrand() {\n            this.oldBrand = {\n                image: \"\"\n            };\n            this.isEdit = false;//新增isEdit为false\n            this.dialog = true;\n        },\n        closeWindow() {\n            this.dialog = false;\n        },\n        editBrand(oldBrand) {\n            //根据品牌的id查询对应的分类信息\n            this.$http.get(\"/item/category/of/brand/\" + oldBrand.id)\n                .then(resp => {\n                    //分类的数组，值从返回的data中获取（分类的集合）\n                    oldBrand.categories = resp.data;\n                    this.oldBrand = oldBrand;\n                    this.isEdit = true;//修改是isEdit为true\n                    this.dialog = true;\n                }).catch(resp => {\n                this.$message.error(\"根据品牌查询分类失败\");\n            })\n        },\n        deleteBrand(brandId){\n            this.$message.confirm(\"您确定要删除\")\n                .then(resp=>{\n                    this.$http.delete(\"item/brand/\"+brandId)\n                }).catch(resp=>{\n\n            })\n        }\n    },\n    watch: {\n        pagination: {\n            deep: true, //深度监控，表示监控对象本身，以及下面所有的属性\n            handler() { //表示有变化后触发的函数\n                //处理分页页容量的bug,如果当前rows为-1表示，要展示所有，展示所有，就把所有的条数赋值给页容量\n                if (this.pagination.rowsPerPage === -1) {\n                    this.pagination.rowsPerPage = this.totalBrands;\n                }\n                this.getDataFromServer();\n            }\n        },\n        key() {\n            this.getDataFromServer();\n        }\n    }\n}\n",{"version":3,"sources":["MyBrand.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"MyBrand.vue","sourceRoot":"src/views/item","sourcesContent":["<template>\r\n    <div>\r\n\r\n        <v-card>\r\n            <v-card-title>\r\n                <v-btn class=\"primary\" @click=\"addBrand\">新增品牌</v-btn>\r\n                <v-spacer/>\r\n                <v-text-field label=\"搜索\" append-icon=\"search\" hide-details v-model=\"key\"></v-text-field>\r\n            </v-card-title>\r\n\r\n\r\n            <v-divider/>\r\n            <v-data-table\r\n                    :headers=\"headers\"\r\n                    :items=\"brands\"\r\n                    :pagination.sync=\"pagination\"\r\n                    :total-items=\"totalBrands\"\r\n                    :loading=\"loading\"\r\n                    class=\"elevation-1\"\r\n            >\r\n                <template slot=\"items\" slot-scope=\"props\">\r\n                    <td>{{ props.item.id }}</td>\r\n                    <td class=\"text-xs-center\">{{ props.item.name }}</td>\r\n                    <td class=\"text-xs-center\"><img :src=\"props.item.image\"></td>\r\n                    <td class=\"text-xs-center\">{{ props.item.letter }}</td>\r\n                    <td class=\"text-xs-center\">\r\n                        <v-btn class=\"warning\" @click=\"editBrand(props.item)\">编辑</v-btn>\r\n                        <v-btn class=\"info\" @click=\"deleteBrand(props.item.id)\">删除</v-btn>\r\n                    </td>\r\n                </template>\r\n            </v-data-table>\r\n        </v-card>\r\n\r\n        <!--        v-model 双向绑定，dialog，true，显示对话框-->\r\n        <v-dialog v-model=\"dialog\" width=\"500\" persistent>\r\n            <brand-form @close=\"closeWindow\" :is-edit=\"isEdit\" :old-brand=\"oldBrand\"></brand-form>\r\n        </v-dialog>\r\n\r\n\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    //倒入组件\r\n    import BrandForm from \"./BrandForm\"\r\n\r\n    export default {\r\n        components: {\r\n            BrandForm //组件的声明\r\n        },\r\n        name: \"my-brand\",\r\n        data() {\r\n            return {\r\n                oldBrand: {},\r\n                isEdit: false,\r\n                dialog: false,\r\n                key: \"\",\r\n                totalBrands: 0, // 总条数\r\n                brands: [], // 当前页品牌数据\r\n                loading: true, // 是否在加载中\r\n                pagination: {}, // 分页信息\r\n                headers: [\r\n                    {text: 'id', align: 'center', value: 'id'},\r\n                    {text: '名称', align: 'center', sortable: false, value: 'name'},\r\n                    {text: 'LOGO', align: 'center', sortable: false, value: 'image'},\r\n                    {text: '首字母', align: 'center', value: 'letter', sortable: true},\r\n                    {text: '操作', align: 'center', sortable: false}\r\n                ]\r\n            }\r\n        },\r\n        mounted() { // 渲染后执行\r\n            // 查询数据\r\n            this.getDataFromServer();\r\n        },\r\n        methods: {\r\n            getDataFromServer() { // 从服务的加载数据的方法。\r\n                this.$http.get(\"/item/brand/page\", {\r\n                    params: {\r\n                        page: this.pagination.page, //当前页\r\n                        rows: this.pagination.rowsPerPage, //页容量\r\n                        sortBy: this.pagination.sortBy, //根据什么排序\r\n                        desc: this.pagination.descending, //排序的条件\r\n                        key: this.key //请求发出时，携带key\r\n                    }\r\n                }).then(resp => {\r\n                    this.totalBrands = resp.data.total,// 总条数\r\n                        this.brands = resp.data.items, // 当前页品牌数据\r\n                        this.loading = false // 是否在加载中\r\n                }).catch(resp => {\r\n                    this.$message.error(\"品牌查询请求失败\");\r\n                })\r\n            },\r\n            addBrand() {\r\n                this.oldBrand = {\r\n                    image: \"\"\r\n                };\r\n                this.isEdit = false;//新增isEdit为false\r\n                this.dialog = true;\r\n            },\r\n            closeWindow() {\r\n                this.dialog = false;\r\n            },\r\n            editBrand(oldBrand) {\r\n                //根据品牌的id查询对应的分类信息\r\n                this.$http.get(\"/item/category/of/brand/\" + oldBrand.id)\r\n                    .then(resp => {\r\n                        //分类的数组，值从返回的data中获取（分类的集合）\r\n                        oldBrand.categories = resp.data;\r\n                        this.oldBrand = oldBrand;\r\n                        this.isEdit = true;//修改是isEdit为true\r\n                        this.dialog = true;\r\n                    }).catch(resp => {\r\n                    this.$message.error(\"根据品牌查询分类失败\");\r\n                })\r\n            },\r\n            deleteBrand(brandId){\r\n                this.$message.confirm(\"您确定要删除\")\r\n                    .then(resp=>{\r\n                        this.$http.delete(\"item/brand/\"+brandId)\r\n                    }).catch(resp=>{\r\n\r\n                })\r\n            }\r\n        },\r\n        watch: {\r\n            pagination: {\r\n                deep: true, //深度监控，表示监控对象本身，以及下面所有的属性\r\n                handler() { //表示有变化后触发的函数\r\n                    //处理分页页容量的bug,如果当前rows为-1表示，要展示所有，展示所有，就把所有的条数赋值给页容量\r\n                    if (this.pagination.rowsPerPage === -1) {\r\n                        this.pagination.rowsPerPage = this.totalBrands;\r\n                    }\r\n                    this.getDataFromServer();\r\n                }\r\n            },\r\n            key() {\r\n                this.getDataFromServer();\r\n            }\r\n        }\r\n    }\r\n</script>"]}]}